#!/bin/bash
_math()
{
  local cur prev opts
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"

  opts="--help --version sum multiply factorial divide square-root cube-root exp isprime gcd nth-root average fibonacci series-sum complex"


  case "${prev}" in
    sum | multiply | divide | factorial | square-root \
      | cube-root | isprime | average | fibonacci)
    COMPREPLY=( $(compgen -W "--numbers" -- ${cur}) )
    return 0
    ;;

  gcd)
    COMPREPLY=( $(compgen -W "--number1 --number2" -- ${cur}) )
    return 0
    ;;

  exp)
    COMPREPLY=( $(compgen -W "--base --power" -- ${cur}) )
    return 0
    ;;

  nth-root)
    COMPREPLY=( $(compgen -W "--number --root" -- ${cur}) )
    return 0
    ;;

  series-sum)
    COMPREPLY=( $(compgen -W "--start --end --exponent" -- ${cur}) )
    return 0
    ;;

  complex)
    COMPREPLY=( $(compgen -W "add subtract mul div" -- ${cur}) )
    return 0
    ;;

  add | subtract | mul | div)
    COMPREPLY=( $(compgen -W "--real1 --imag1 --real2 --imag2" -- ${cur}) )
    return 0
    ;;

    --numbers | --number | --number1 | --number2 | --base \
      | --power | --root | --end | --start | --exponent | --real1 | --real2 | --imag1 | --imag2)
    COMPREPLY=("")
    return 0
    ;;

esac

if [[ $COMP_CWORD -gt 3 ]] ; then

  sec_prev="${COMP_WORDS[COMP_CWORD-2]}"

  thr_prev="${COMP_WORDS[COMP_CWORD-3]}"

  if [[ $thr_prev == exp ]] ; then

    case "${sec_prev}" in
      --base)
        COMPREPLY=( $(compgen -W "--power" -- ${cur}) )
        return 0
        ;;
      --power)
        COMPREPLY=( $(compgen -W "--base" -- ${cur}) )
        return 0
        ;;
    esac

  fi

  if [[ $thr_prev == gcd ]] ; then

    case "${sec_prev}" in
      --number1)
        COMPREPLY=( $(compgen -W "--number2" -- ${cur}) )
        return 0
        ;;
      --number2)
        COMPREPLY=( $(compgen -W "--number1" -- ${cur}) )
        return 0
        ;;
    esac

  fi

  if [[ $thr_prev == nth-root ]] ; then

    case "${sec_prev}" in
      --number)
        COMPREPLY=( $(compgen -W "--root" -- ${cur}) )
        return 0
        ;;
      --root)
        COMPREPLY=( $(compgen -W "--number" -- ${cur}) )
        return 0
        ;;
    esac

  fi

  if [[ $thr_prev == series-sum ]] ; then

    case "${sec_prev}" in
      --start)
        COMPREPLY=( $(compgen -W "--end --exponent" -- ${cur}) )
        return 0
        ;;
      --end)
        COMPREPLY=( $(compgen -W "--start --exponent" -- ${cur}) )
        return 0
        ;;

      --exponent)
        COMPREPLY=( $(compgen -W "--start --end" -- ${cur}) )
        return 0
        ;;
    esac

  fi



  if [[ $COMP_CWORD -gt 4 ]] ; then

    sec_prev="${COMP_WORDS[COMP_CWORD-2]}"

    thr_prev="${COMP_WORDS[COMP_CWORD-3]}"
    for_prev="${COMP_WORDS[COMP_CWORD-4]}"

    if [[ $for_prev == complex ]] ; then


      case "${thr_prev}" in
        add | subtract | mul | div)

          case "${sec_prev}" in
            --real1)
              COMPREPLY=( $(compgen -W "--real2 --imag1 --imag2" -- ${cur}) )
              return 0
              ;;
            --real2)
              COMPREPLY=( $(compgen -W "--real1 --imag1 --imag2" -- ${cur}) )
              return 0
              ;;

            --imag1)
              COMPREPLY=( $(compgen -W "--real1 --real2 --imag2" -- ${cur}) )
              return 0
              ;;

            --imag2)
              COMPREPLY=( $(compgen -W "--real1 --real2 --imag1" -- ${cur}) )
              return 0
              ;;
          esac

          return 0;
          ;;
      esac

    fi

  fi



  if [[ $COMP_CWORD -gt 5 ]] ; then

    sec_prev="${COMP_WORDS[COMP_CWORD-2]}"
    fiv_prev="${COMP_WORDS[COMP_CWORD-5]}"
    for_prev="${COMP_WORDS[COMP_CWORD-4]}"

    if [[ $fiv_prev == series-sum ]] ; then

      case "${for_prev}" in
        --start)
          if [[ $sec_prev == --end ]] ; then
            COMPREPLY=( $(compgen -W "--exponent" -- ${cur}) )
          elif [[ $sec_prev == --exponent ]] ; then
            COMPREPLY=( $(compgen -W "--end" -- ${cur}) )
          fi
          return 0
          ;;

        --end)
          if [[ $sec_prev == --start ]] ; then
            COMPREPLY=( $(compgen -W "--exponent" -- ${cur}) )
          elif [[ $sec_prev == --exponent ]] ; then
            COMPREPLY=( $(compgen -W "--start" -- ${cur}) )
          fi
          return 0
          ;;


        --exponent)
          if [[ $sec_prev == --start ]] ; then
            COMPREPLY=( $(compgen -W "--end" -- ${cur}) )
          elif [[ $sec_prev == --end ]] ; then
            COMPREPLY=( $(compgen -W "--start" -- ${cur}) )
          fi
          return 0
          ;;

      esac


    fi

  fi

  if [[ $COMP_CWORD -gt 6 ]] ; then

    sec_prev="${COMP_WORDS[COMP_CWORD-2]}"
    fiv_prev="${COMP_WORDS[COMP_CWORD-5]}"
    for_prev="${COMP_WORDS[COMP_CWORD-4]}"
    six_prev="${COMP_WORDS[COMP_CWORD-6]}"

    if [[ $six_prev == complex ]] ; then

      case "${fiv_prev}" in
        add | subtract | div | mul)

          case "${for_prev}" in
            --real1)
              if [[ $sec_prev == --real2 ]] ; then
                COMPREPLY=( $(compgen -W "--imag1 --imag2" -- ${cur}) )
              elif [[ $sec_prev == --imag1 ]] ; then
                COMPREPLY=( $(compgen -W "--real2 --imag2" -- ${cur}) )
              elif [[ $sec_prev == --imag2 ]] ; then
                COMPREPLY=( $(compgen -W "--real2 --imag1" -- ${cur}) )
              fi
              return 0
              ;;

            --real2)
              if [[ $sec_prev == --real1 ]] ; then
                COMPREPLY=( $(compgen -W "--imag1 --imag2" -- ${cur}) )
              elif [[ $sec_prev == --imag1 ]] ; then
                COMPREPLY=( $(compgen -W "--real1 --imag2" -- ${cur}) )
              elif [[ $sec_prev == --imag2 ]] ; then
                COMPREPLY=( $(compgen -W "--real1 --imag1" -- ${cur}) )
              fi
              return 0
              ;;


            --imag1)
              if [[ $sec_prev == --real2 ]] ; then
                COMPREPLY=( $(compgen -W "--real1 --imag2" -- ${cur}) )
              elif [[ $sec_prev == --real1 ]] ; then
                COMPREPLY=( $(compgen -W "--real2 --imag2" -- ${cur}) )
              elif [[ $sec_prev == --imag2 ]] ; then
                COMPREPLY=( $(compgen -W "--real2 --real1" -- ${cur}) )
              fi
              return 0
              ;;


            --imag2)
              if [[ $sec_prev == --real2 ]] ; then
                COMPREPLY=( $(compgen -W "--real1 --imag1" -- ${cur}) )
              elif [[ $sec_prev == --real1 ]] ; then
                COMPREPLY=( $(compgen -W "--real2 --imag1" -- ${cur}) )
              elif [[ $sec_prev == --imag1 ]] ; then
                COMPREPLY=( $(compgen -W "--real2 --real1" -- ${cur}) )
              fi
              return 0
              ;;


          esac

          return 0
          ;;
      esac

    fi


  fi



  if [[ $COMP_CWORD -gt 8 ]] ; then
    sec_prev="${COMP_WORDS[COMP_CWORD-2]}"
    thr_prev="${COMP_WORDS[COMP_CWORD-3]}"
    for_prev="${COMP_WORDS[COMP_CWORD-4]}"
    fiv_prev="${COMP_WORDS[COMP_CWORD-5]}"
    six_prev="${COMP_WORDS[COMP_CWORD-6]}"
    sev_prev="${COMP_WORDS[COMP_CWORD-7]}"
    eig_prev="${COMP_WORDS[COMP_CWORD-8]}"


    if [[ $eig_prev == complex ]] ; then

      case "${sev_prev}" in
        add | subtract | mul | div)

          case "${six_prev}" in
            --real1)
              if [[ $for_prev == --real2 ]] ; then
                if [[ $sec_prev == --imag1 ]] ; then
                  COMPREPLY=( $(compgen -W "--imag2" -- ${cur}) )
                else
                  COMPREPLY=( $(compgen -W "--imag1" -- ${cur}) )
                fi
              elif [[ $for_prev == --imag1 ]] ; then
                if [[ $sec_prev == --imag2 ]] ; then
                  COMPREPLY=( $(compgen -W "--real2" -- ${cur}) )
                else
                  COMPREPLY=( $(compgen -W "--imag2" -- ${cur}) )
                fi
              elif [[ $for_prev == --imag2 ]] ; then
                if [[ $sec_prev == --imag1 ]] ; then
                  COMPREPLY=( $(compgen -W "--real2" -- ${cur}) )
                else
                  COMPREPLY=( $(compgen -W "--imag1" -- ${cur}) )
                fi
              fi
              return 0
              ;;

            --real2)
              if [[ $for_prev == --real1 ]] ; then
                if [[ $sec_prev == --imag1 ]] ; then
                  COMPREPLY=( $(compgen -W "--imag2" -- ${cur}) )
                else
                  COMPREPLY=( $(compgen -W "--imag1" -- ${cur}) )
                fi
              elif [[ $for_prev == --imag1 ]] ; then
                if [[ $sec_prev == --imag2 ]] ; then
                  COMPREPLY=( $(compgen -W "--real1" -- ${cur}) )
                else
                  COMPREPLY=( $(compgen -W "--imag2" -- ${cur}) )
                fi
              elif [[ $for_prev == --imag2 ]] ; then
                if [[ $sec_prev == --imag1 ]] ; then
                  COMPREPLY=( $(compgen -W "--real1" -- ${cur}) )
                else
                  COMPREPLY=( $(compgen -W "--imag1" -- ${cur}) )
                fi
              fi
              return 0
              ;;

            --imag1)
              if [[ $for_prev == --real2 ]] ; then
                if [[ $sec_prev == --real1 ]] ; then
                  COMPREPLY=( $(compgen -W "--imag2" -- ${cur}) )
                else
                  COMPREPLY=( $(compgen -W "--real1" -- ${cur}) )
                fi
              elif [[ $for_prev == --real1 ]] ; then
                if [[ $sec_prev == --imag2 ]] ; then
                  COMPREPLY=( $(compgen -W "--real2" -- ${cur}) )
                else
                  COMPREPLY=( $(compgen -W "--imag2" -- ${cur}) )
                fi
              elif [[ $for_prev == --imag2 ]] ; then
                if [[ $sec_prev == --real1 ]] ; then
                  COMPREPLY=( $(compgen -W "--real2" -- ${cur}) )
                else
                  COMPREPLY=( $(compgen -W "--real1" -- ${cur}) )
                fi
              fi
              return 0
              ;;

            --imag2)
              if [[ $for_prev == --real2 ]] ; then
                if [[ $sec_prev == --real1 ]] ; then
                  COMPREPLY=( $(compgen -W "--imag1" -- ${cur}) )
                else
                  COMPREPLY=( $(compgen -W "--real1" -- ${cur}) )
                fi
              elif [[ $for_prev == --real1 ]] ; then
                if [[ $sec_prev == --imag1 ]] ; then
                  COMPREPLY=( $(compgen -W "--real2" -- ${cur}) )
                else
                  COMPREPLY=( $(compgen -W "--imag1" -- ${cur}) )
                fi
              elif [[ $for_prev == --imag1 ]] ; then
                if [[ $sec_prev == --real1 ]] ; then
                  COMPREPLY=( $(compgen -W "--real2" -- ${cur}) )
                else
                  COMPREPLY=( $(compgen -W "--real1" -- ${cur}) )
                fi
              fi
              return 0
              ;;

          esac


          return 0
          ;;

      esac

    fi



  fi


fi

if [[ $COMP_CWORD == 1 ]] ; then
  COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
fi
return 0
}
complete -o default -F _math math
